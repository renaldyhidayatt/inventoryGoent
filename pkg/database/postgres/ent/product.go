// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/product"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Qty holds the value of the "qty" field.
	Qty string `json:"qty,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges ProductEdges `json:"edges"`
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// Category holds the value of the category edge.
	Category []*Category `json:"category,omitempty"`
	// Productkeluar holds the value of the productkeluar edge.
	Productkeluar []*ProductKeluar `json:"productkeluar,omitempty"`
	// Productmasuk holds the value of the productmasuk edge.
	Productmasuk []*ProductMasuk `json:"productmasuk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) CategoryOrErr() ([]*Category, error) {
	if e.loadedTypes[0] {
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// ProductkeluarOrErr returns the Productkeluar value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) ProductkeluarOrErr() ([]*ProductKeluar, error) {
	if e.loadedTypes[1] {
		return e.Productkeluar, nil
	}
	return nil, &NotLoadedError{edge: "productkeluar"}
}

// ProductmasukOrErr returns the Productmasuk value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) ProductmasukOrErr() ([]*ProductMasuk, error) {
	if e.loadedTypes[2] {
		return e.Productmasuk, nil
	}
	return nil, &NotLoadedError{edge: "productmasuk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			values[i] = new(sql.NullInt64)
		case product.FieldName, product.FieldImage, product.FieldQty:
			values[i] = new(sql.NullString)
		case product.FieldCreatedAt, product.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Product", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case product.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				pr.Image = value.String
			}
		case product.FieldQty:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[i])
			} else if value.Valid {
				pr.Qty = value.String
			}
		case product.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case product.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryCategory queries the "category" edge of the Product entity.
func (pr *Product) QueryCategory() *CategoryQuery {
	return NewProductClient(pr.config).QueryCategory(pr)
}

// QueryProductkeluar queries the "productkeluar" edge of the Product entity.
func (pr *Product) QueryProductkeluar() *ProductKeluarQuery {
	return NewProductClient(pr.config).QueryProductkeluar(pr)
}

// QueryProductmasuk queries the "productmasuk" edge of the Product entity.
func (pr *Product) QueryProductmasuk() *ProductMasukQuery {
	return NewProductClient(pr.config).QueryProductmasuk(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return NewProductClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(pr.Image)
	builder.WriteString(", ")
	builder.WriteString("qty=")
	builder.WriteString(pr.Qty)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
