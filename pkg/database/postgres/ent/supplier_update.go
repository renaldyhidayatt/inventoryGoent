// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/predicate"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/productmasuk"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/supplier"
)

// SupplierUpdate is the builder for updating Supplier entities.
type SupplierUpdate struct {
	config
	hooks    []Hook
	mutation *SupplierMutation
}

// Where appends a list predicates to the SupplierUpdate builder.
func (su *SupplierUpdate) Where(ps ...predicate.Supplier) *SupplierUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SupplierUpdate) SetName(s string) *SupplierUpdate {
	su.mutation.SetName(s)
	return su
}

// SetAlamat sets the "alamat" field.
func (su *SupplierUpdate) SetAlamat(s string) *SupplierUpdate {
	su.mutation.SetAlamat(s)
	return su
}

// SetTelepon sets the "telepon" field.
func (su *SupplierUpdate) SetTelepon(s string) *SupplierUpdate {
	su.mutation.SetTelepon(s)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SupplierUpdate) SetCreatedAt(t time.Time) *SupplierUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SupplierUpdate) SetNillableCreatedAt(t *time.Time) *SupplierUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SupplierUpdate) SetUpdatedAt(t time.Time) *SupplierUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// AddProductmasukIDs adds the "productmasuk" edge to the ProductMasuk entity by IDs.
func (su *SupplierUpdate) AddProductmasukIDs(ids ...int) *SupplierUpdate {
	su.mutation.AddProductmasukIDs(ids...)
	return su
}

// AddProductmasuk adds the "productmasuk" edges to the ProductMasuk entity.
func (su *SupplierUpdate) AddProductmasuk(p ...*ProductMasuk) *SupplierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProductmasukIDs(ids...)
}

// Mutation returns the SupplierMutation object of the builder.
func (su *SupplierUpdate) Mutation() *SupplierMutation {
	return su.mutation
}

// ClearProductmasuk clears all "productmasuk" edges to the ProductMasuk entity.
func (su *SupplierUpdate) ClearProductmasuk() *SupplierUpdate {
	su.mutation.ClearProductmasuk()
	return su
}

// RemoveProductmasukIDs removes the "productmasuk" edge to ProductMasuk entities by IDs.
func (su *SupplierUpdate) RemoveProductmasukIDs(ids ...int) *SupplierUpdate {
	su.mutation.RemoveProductmasukIDs(ids...)
	return su
}

// RemoveProductmasuk removes "productmasuk" edges to ProductMasuk entities.
func (su *SupplierUpdate) RemoveProductmasuk(p ...*ProductMasuk) *SupplierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProductmasukIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SupplierUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks[int, SupplierMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SupplierUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SupplierUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SupplierUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SupplierUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := supplier.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *SupplierUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   supplier.Table,
			Columns: supplier.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: supplier.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(supplier.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Alamat(); ok {
		_spec.SetField(supplier.FieldAlamat, field.TypeString, value)
	}
	if value, ok := su.mutation.Telepon(); ok {
		_spec.SetField(supplier.FieldTelepon, field.TypeString, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(supplier.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(supplier.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.ProductmasukCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   supplier.ProductmasukTable,
			Columns: supplier.ProductmasukPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmasuk.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProductmasukIDs(); len(nodes) > 0 && !su.mutation.ProductmasukCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   supplier.ProductmasukTable,
			Columns: supplier.ProductmasukPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmasuk.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProductmasukIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   supplier.ProductmasukTable,
			Columns: supplier.ProductmasukPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmasuk.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{supplier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SupplierUpdateOne is the builder for updating a single Supplier entity.
type SupplierUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SupplierMutation
}

// SetName sets the "name" field.
func (suo *SupplierUpdateOne) SetName(s string) *SupplierUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetAlamat sets the "alamat" field.
func (suo *SupplierUpdateOne) SetAlamat(s string) *SupplierUpdateOne {
	suo.mutation.SetAlamat(s)
	return suo
}

// SetTelepon sets the "telepon" field.
func (suo *SupplierUpdateOne) SetTelepon(s string) *SupplierUpdateOne {
	suo.mutation.SetTelepon(s)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SupplierUpdateOne) SetCreatedAt(t time.Time) *SupplierUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SupplierUpdateOne) SetNillableCreatedAt(t *time.Time) *SupplierUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SupplierUpdateOne) SetUpdatedAt(t time.Time) *SupplierUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// AddProductmasukIDs adds the "productmasuk" edge to the ProductMasuk entity by IDs.
func (suo *SupplierUpdateOne) AddProductmasukIDs(ids ...int) *SupplierUpdateOne {
	suo.mutation.AddProductmasukIDs(ids...)
	return suo
}

// AddProductmasuk adds the "productmasuk" edges to the ProductMasuk entity.
func (suo *SupplierUpdateOne) AddProductmasuk(p ...*ProductMasuk) *SupplierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProductmasukIDs(ids...)
}

// Mutation returns the SupplierMutation object of the builder.
func (suo *SupplierUpdateOne) Mutation() *SupplierMutation {
	return suo.mutation
}

// ClearProductmasuk clears all "productmasuk" edges to the ProductMasuk entity.
func (suo *SupplierUpdateOne) ClearProductmasuk() *SupplierUpdateOne {
	suo.mutation.ClearProductmasuk()
	return suo
}

// RemoveProductmasukIDs removes the "productmasuk" edge to ProductMasuk entities by IDs.
func (suo *SupplierUpdateOne) RemoveProductmasukIDs(ids ...int) *SupplierUpdateOne {
	suo.mutation.RemoveProductmasukIDs(ids...)
	return suo
}

// RemoveProductmasuk removes "productmasuk" edges to ProductMasuk entities.
func (suo *SupplierUpdateOne) RemoveProductmasuk(p ...*ProductMasuk) *SupplierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProductmasukIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SupplierUpdateOne) Select(field string, fields ...string) *SupplierUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Supplier entity.
func (suo *SupplierUpdateOne) Save(ctx context.Context) (*Supplier, error) {
	suo.defaults()
	return withHooks[*Supplier, SupplierMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SupplierUpdateOne) SaveX(ctx context.Context) *Supplier {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SupplierUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SupplierUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SupplierUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := supplier.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *SupplierUpdateOne) sqlSave(ctx context.Context) (_node *Supplier, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   supplier.Table,
			Columns: supplier.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: supplier.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Supplier.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, supplier.FieldID)
		for _, f := range fields {
			if !supplier.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != supplier.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(supplier.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Alamat(); ok {
		_spec.SetField(supplier.FieldAlamat, field.TypeString, value)
	}
	if value, ok := suo.mutation.Telepon(); ok {
		_spec.SetField(supplier.FieldTelepon, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(supplier.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(supplier.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.ProductmasukCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   supplier.ProductmasukTable,
			Columns: supplier.ProductmasukPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmasuk.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProductmasukIDs(); len(nodes) > 0 && !suo.mutation.ProductmasukCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   supplier.ProductmasukTable,
			Columns: supplier.ProductmasukPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmasuk.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProductmasukIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   supplier.ProductmasukTable,
			Columns: supplier.ProductmasukPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: productmasuk.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Supplier{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{supplier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
