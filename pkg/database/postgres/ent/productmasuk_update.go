// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/predicate"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/product"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/productmasuk"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/supplier"
)

// ProductMasukUpdate is the builder for updating ProductMasuk entities.
type ProductMasukUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMasukMutation
}

// Where appends a list predicates to the ProductMasukUpdate builder.
func (pmu *ProductMasukUpdate) Where(ps ...predicate.ProductMasuk) *ProductMasukUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetName sets the "name" field.
func (pmu *ProductMasukUpdate) SetName(s string) *ProductMasukUpdate {
	pmu.mutation.SetName(s)
	return pmu
}

// SetQty sets the "qty" field.
func (pmu *ProductMasukUpdate) SetQty(s string) *ProductMasukUpdate {
	pmu.mutation.SetQty(s)
	return pmu
}

// SetCreatedAt sets the "created_at" field.
func (pmu *ProductMasukUpdate) SetCreatedAt(t time.Time) *ProductMasukUpdate {
	pmu.mutation.SetCreatedAt(t)
	return pmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmu *ProductMasukUpdate) SetNillableCreatedAt(t *time.Time) *ProductMasukUpdate {
	if t != nil {
		pmu.SetCreatedAt(*t)
	}
	return pmu
}

// SetUpdatedAt sets the "updated_at" field.
func (pmu *ProductMasukUpdate) SetUpdatedAt(t time.Time) *ProductMasukUpdate {
	pmu.mutation.SetUpdatedAt(t)
	return pmu
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (pmu *ProductMasukUpdate) AddProductIDs(ids ...int) *ProductMasukUpdate {
	pmu.mutation.AddProductIDs(ids...)
	return pmu
}

// AddProduct adds the "product" edges to the Product entity.
func (pmu *ProductMasukUpdate) AddProduct(p ...*Product) *ProductMasukUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmu.AddProductIDs(ids...)
}

// AddSupplierIDs adds the "supplier" edge to the Supplier entity by IDs.
func (pmu *ProductMasukUpdate) AddSupplierIDs(ids ...int) *ProductMasukUpdate {
	pmu.mutation.AddSupplierIDs(ids...)
	return pmu
}

// AddSupplier adds the "supplier" edges to the Supplier entity.
func (pmu *ProductMasukUpdate) AddSupplier(s ...*Supplier) *ProductMasukUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pmu.AddSupplierIDs(ids...)
}

// Mutation returns the ProductMasukMutation object of the builder.
func (pmu *ProductMasukUpdate) Mutation() *ProductMasukMutation {
	return pmu.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (pmu *ProductMasukUpdate) ClearProduct() *ProductMasukUpdate {
	pmu.mutation.ClearProduct()
	return pmu
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (pmu *ProductMasukUpdate) RemoveProductIDs(ids ...int) *ProductMasukUpdate {
	pmu.mutation.RemoveProductIDs(ids...)
	return pmu
}

// RemoveProduct removes "product" edges to Product entities.
func (pmu *ProductMasukUpdate) RemoveProduct(p ...*Product) *ProductMasukUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmu.RemoveProductIDs(ids...)
}

// ClearSupplier clears all "supplier" edges to the Supplier entity.
func (pmu *ProductMasukUpdate) ClearSupplier() *ProductMasukUpdate {
	pmu.mutation.ClearSupplier()
	return pmu
}

// RemoveSupplierIDs removes the "supplier" edge to Supplier entities by IDs.
func (pmu *ProductMasukUpdate) RemoveSupplierIDs(ids ...int) *ProductMasukUpdate {
	pmu.mutation.RemoveSupplierIDs(ids...)
	return pmu
}

// RemoveSupplier removes "supplier" edges to Supplier entities.
func (pmu *ProductMasukUpdate) RemoveSupplier(s ...*Supplier) *ProductMasukUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pmu.RemoveSupplierIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *ProductMasukUpdate) Save(ctx context.Context) (int, error) {
	pmu.defaults()
	return withHooks[int, ProductMasukMutation](ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *ProductMasukUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *ProductMasukUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *ProductMasukUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmu *ProductMasukUpdate) defaults() {
	if _, ok := pmu.mutation.UpdatedAt(); !ok {
		v := productmasuk.UpdateDefaultUpdatedAt()
		pmu.mutation.SetUpdatedAt(v)
	}
}

func (pmu *ProductMasukUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productmasuk.Table,
			Columns: productmasuk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productmasuk.FieldID,
			},
		},
	}
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.Name(); ok {
		_spec.SetField(productmasuk.FieldName, field.TypeString, value)
	}
	if value, ok := pmu.mutation.Qty(); ok {
		_spec.SetField(productmasuk.FieldQty, field.TypeString, value)
	}
	if value, ok := pmu.mutation.CreatedAt(); ok {
		_spec.SetField(productmasuk.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pmu.mutation.UpdatedAt(); ok {
		_spec.SetField(productmasuk.FieldUpdatedAt, field.TypeTime, value)
	}
	if pmu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productmasuk.ProductTable,
			Columns: productmasuk.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.RemovedProductIDs(); len(nodes) > 0 && !pmu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productmasuk.ProductTable,
			Columns: productmasuk.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productmasuk.ProductTable,
			Columns: productmasuk.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.SupplierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productmasuk.SupplierTable,
			Columns: productmasuk.SupplierPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: supplier.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.RemovedSupplierIDs(); len(nodes) > 0 && !pmu.mutation.SupplierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productmasuk.SupplierTable,
			Columns: productmasuk.SupplierPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: supplier.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.SupplierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productmasuk.SupplierTable,
			Columns: productmasuk.SupplierPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: supplier.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productmasuk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// ProductMasukUpdateOne is the builder for updating a single ProductMasuk entity.
type ProductMasukUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMasukMutation
}

// SetName sets the "name" field.
func (pmuo *ProductMasukUpdateOne) SetName(s string) *ProductMasukUpdateOne {
	pmuo.mutation.SetName(s)
	return pmuo
}

// SetQty sets the "qty" field.
func (pmuo *ProductMasukUpdateOne) SetQty(s string) *ProductMasukUpdateOne {
	pmuo.mutation.SetQty(s)
	return pmuo
}

// SetCreatedAt sets the "created_at" field.
func (pmuo *ProductMasukUpdateOne) SetCreatedAt(t time.Time) *ProductMasukUpdateOne {
	pmuo.mutation.SetCreatedAt(t)
	return pmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmuo *ProductMasukUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductMasukUpdateOne {
	if t != nil {
		pmuo.SetCreatedAt(*t)
	}
	return pmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pmuo *ProductMasukUpdateOne) SetUpdatedAt(t time.Time) *ProductMasukUpdateOne {
	pmuo.mutation.SetUpdatedAt(t)
	return pmuo
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (pmuo *ProductMasukUpdateOne) AddProductIDs(ids ...int) *ProductMasukUpdateOne {
	pmuo.mutation.AddProductIDs(ids...)
	return pmuo
}

// AddProduct adds the "product" edges to the Product entity.
func (pmuo *ProductMasukUpdateOne) AddProduct(p ...*Product) *ProductMasukUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmuo.AddProductIDs(ids...)
}

// AddSupplierIDs adds the "supplier" edge to the Supplier entity by IDs.
func (pmuo *ProductMasukUpdateOne) AddSupplierIDs(ids ...int) *ProductMasukUpdateOne {
	pmuo.mutation.AddSupplierIDs(ids...)
	return pmuo
}

// AddSupplier adds the "supplier" edges to the Supplier entity.
func (pmuo *ProductMasukUpdateOne) AddSupplier(s ...*Supplier) *ProductMasukUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pmuo.AddSupplierIDs(ids...)
}

// Mutation returns the ProductMasukMutation object of the builder.
func (pmuo *ProductMasukUpdateOne) Mutation() *ProductMasukMutation {
	return pmuo.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (pmuo *ProductMasukUpdateOne) ClearProduct() *ProductMasukUpdateOne {
	pmuo.mutation.ClearProduct()
	return pmuo
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (pmuo *ProductMasukUpdateOne) RemoveProductIDs(ids ...int) *ProductMasukUpdateOne {
	pmuo.mutation.RemoveProductIDs(ids...)
	return pmuo
}

// RemoveProduct removes "product" edges to Product entities.
func (pmuo *ProductMasukUpdateOne) RemoveProduct(p ...*Product) *ProductMasukUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmuo.RemoveProductIDs(ids...)
}

// ClearSupplier clears all "supplier" edges to the Supplier entity.
func (pmuo *ProductMasukUpdateOne) ClearSupplier() *ProductMasukUpdateOne {
	pmuo.mutation.ClearSupplier()
	return pmuo
}

// RemoveSupplierIDs removes the "supplier" edge to Supplier entities by IDs.
func (pmuo *ProductMasukUpdateOne) RemoveSupplierIDs(ids ...int) *ProductMasukUpdateOne {
	pmuo.mutation.RemoveSupplierIDs(ids...)
	return pmuo
}

// RemoveSupplier removes "supplier" edges to Supplier entities.
func (pmuo *ProductMasukUpdateOne) RemoveSupplier(s ...*Supplier) *ProductMasukUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pmuo.RemoveSupplierIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *ProductMasukUpdateOne) Select(field string, fields ...string) *ProductMasukUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated ProductMasuk entity.
func (pmuo *ProductMasukUpdateOne) Save(ctx context.Context) (*ProductMasuk, error) {
	pmuo.defaults()
	return withHooks[*ProductMasuk, ProductMasukMutation](ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *ProductMasukUpdateOne) SaveX(ctx context.Context) *ProductMasuk {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *ProductMasukUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *ProductMasukUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmuo *ProductMasukUpdateOne) defaults() {
	if _, ok := pmuo.mutation.UpdatedAt(); !ok {
		v := productmasuk.UpdateDefaultUpdatedAt()
		pmuo.mutation.SetUpdatedAt(v)
	}
}

func (pmuo *ProductMasukUpdateOne) sqlSave(ctx context.Context) (_node *ProductMasuk, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productmasuk.Table,
			Columns: productmasuk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productmasuk.FieldID,
			},
		},
	}
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductMasuk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productmasuk.FieldID)
		for _, f := range fields {
			if !productmasuk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productmasuk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.Name(); ok {
		_spec.SetField(productmasuk.FieldName, field.TypeString, value)
	}
	if value, ok := pmuo.mutation.Qty(); ok {
		_spec.SetField(productmasuk.FieldQty, field.TypeString, value)
	}
	if value, ok := pmuo.mutation.CreatedAt(); ok {
		_spec.SetField(productmasuk.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productmasuk.FieldUpdatedAt, field.TypeTime, value)
	}
	if pmuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productmasuk.ProductTable,
			Columns: productmasuk.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.RemovedProductIDs(); len(nodes) > 0 && !pmuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productmasuk.ProductTable,
			Columns: productmasuk.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productmasuk.ProductTable,
			Columns: productmasuk.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.SupplierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productmasuk.SupplierTable,
			Columns: productmasuk.SupplierPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: supplier.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.RemovedSupplierIDs(); len(nodes) > 0 && !pmuo.mutation.SupplierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productmasuk.SupplierTable,
			Columns: productmasuk.SupplierPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: supplier.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.SupplierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productmasuk.SupplierTable,
			Columns: productmasuk.SupplierPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: supplier.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductMasuk{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productmasuk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
