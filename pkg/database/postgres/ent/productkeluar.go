// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/productkeluar"
)

// ProductKeluar is the model entity for the ProductKeluar schema.
type ProductKeluar struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Qty holds the value of the "qty" field.
	Qty string `json:"qty,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductKeluarQuery when eager-loading is set.
	Edges ProductKeluarEdges `json:"edges"`
}

// ProductKeluarEdges holds the relations/edges for other nodes in the graph.
type ProductKeluarEdges struct {
	// Products holds the value of the products edge.
	Products []*Product `json:"products,omitempty"`
	// Category holds the value of the category edge.
	Category []*Category `json:"category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e ProductKeluarEdges) ProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading.
func (e ProductKeluarEdges) CategoryOrErr() ([]*Category, error) {
	if e.loadedTypes[1] {
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductKeluar) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productkeluar.FieldID:
			values[i] = new(sql.NullInt64)
		case productkeluar.FieldQty:
			values[i] = new(sql.NullString)
		case productkeluar.FieldCreatedAt, productkeluar.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProductKeluar", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductKeluar fields.
func (pk *ProductKeluar) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productkeluar.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pk.ID = int(value.Int64)
		case productkeluar.FieldQty:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[i])
			} else if value.Valid {
				pk.Qty = value.String
			}
		case productkeluar.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pk.CreatedAt = value.Time
			}
		case productkeluar.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pk.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryProducts queries the "products" edge of the ProductKeluar entity.
func (pk *ProductKeluar) QueryProducts() *ProductQuery {
	return NewProductKeluarClient(pk.config).QueryProducts(pk)
}

// QueryCategory queries the "category" edge of the ProductKeluar entity.
func (pk *ProductKeluar) QueryCategory() *CategoryQuery {
	return NewProductKeluarClient(pk.config).QueryCategory(pk)
}

// Update returns a builder for updating this ProductKeluar.
// Note that you need to call ProductKeluar.Unwrap() before calling this method if this ProductKeluar
// was returned from a transaction, and the transaction was committed or rolled back.
func (pk *ProductKeluar) Update() *ProductKeluarUpdateOne {
	return NewProductKeluarClient(pk.config).UpdateOne(pk)
}

// Unwrap unwraps the ProductKeluar entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pk *ProductKeluar) Unwrap() *ProductKeluar {
	_tx, ok := pk.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductKeluar is not a transactional entity")
	}
	pk.config.driver = _tx.drv
	return pk
}

// String implements the fmt.Stringer.
func (pk *ProductKeluar) String() string {
	var builder strings.Builder
	builder.WriteString("ProductKeluar(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pk.ID))
	builder.WriteString("qty=")
	builder.WriteString(pk.Qty)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pk.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pk.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProductKeluars is a parsable slice of ProductKeluar.
type ProductKeluars []*ProductKeluar

func (pk ProductKeluars) config(cfg config) {
	for _i := range pk {
		pk[_i].config = cfg
	}
}
