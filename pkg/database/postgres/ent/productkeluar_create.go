// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/category"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/product"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/productkeluar"
)

// ProductKeluarCreate is the builder for creating a ProductKeluar entity.
type ProductKeluarCreate struct {
	config
	mutation *ProductKeluarMutation
	hooks    []Hook
}

// SetQty sets the "qty" field.
func (pkc *ProductKeluarCreate) SetQty(s string) *ProductKeluarCreate {
	pkc.mutation.SetQty(s)
	return pkc
}

// SetCreatedAt sets the "created_at" field.
func (pkc *ProductKeluarCreate) SetCreatedAt(t time.Time) *ProductKeluarCreate {
	pkc.mutation.SetCreatedAt(t)
	return pkc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pkc *ProductKeluarCreate) SetNillableCreatedAt(t *time.Time) *ProductKeluarCreate {
	if t != nil {
		pkc.SetCreatedAt(*t)
	}
	return pkc
}

// SetUpdatedAt sets the "updated_at" field.
func (pkc *ProductKeluarCreate) SetUpdatedAt(t time.Time) *ProductKeluarCreate {
	pkc.mutation.SetUpdatedAt(t)
	return pkc
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (pkc *ProductKeluarCreate) AddProductIDs(ids ...int) *ProductKeluarCreate {
	pkc.mutation.AddProductIDs(ids...)
	return pkc
}

// AddProducts adds the "products" edges to the Product entity.
func (pkc *ProductKeluarCreate) AddProducts(p ...*Product) *ProductKeluarCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pkc.AddProductIDs(ids...)
}

// AddCategoryIDs adds the "category" edge to the Category entity by IDs.
func (pkc *ProductKeluarCreate) AddCategoryIDs(ids ...int) *ProductKeluarCreate {
	pkc.mutation.AddCategoryIDs(ids...)
	return pkc
}

// AddCategory adds the "category" edges to the Category entity.
func (pkc *ProductKeluarCreate) AddCategory(c ...*Category) *ProductKeluarCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pkc.AddCategoryIDs(ids...)
}

// Mutation returns the ProductKeluarMutation object of the builder.
func (pkc *ProductKeluarCreate) Mutation() *ProductKeluarMutation {
	return pkc.mutation
}

// Save creates the ProductKeluar in the database.
func (pkc *ProductKeluarCreate) Save(ctx context.Context) (*ProductKeluar, error) {
	pkc.defaults()
	return withHooks[*ProductKeluar, ProductKeluarMutation](ctx, pkc.sqlSave, pkc.mutation, pkc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pkc *ProductKeluarCreate) SaveX(ctx context.Context) *ProductKeluar {
	v, err := pkc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pkc *ProductKeluarCreate) Exec(ctx context.Context) error {
	_, err := pkc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pkc *ProductKeluarCreate) ExecX(ctx context.Context) {
	if err := pkc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pkc *ProductKeluarCreate) defaults() {
	if _, ok := pkc.mutation.CreatedAt(); !ok {
		v := productkeluar.DefaultCreatedAt()
		pkc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pkc *ProductKeluarCreate) check() error {
	if _, ok := pkc.mutation.Qty(); !ok {
		return &ValidationError{Name: "qty", err: errors.New(`ent: missing required field "ProductKeluar.qty"`)}
	}
	if _, ok := pkc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProductKeluar.created_at"`)}
	}
	if _, ok := pkc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProductKeluar.updated_at"`)}
	}
	return nil
}

func (pkc *ProductKeluarCreate) sqlSave(ctx context.Context) (*ProductKeluar, error) {
	if err := pkc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pkc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pkc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pkc.mutation.id = &_node.ID
	pkc.mutation.done = true
	return _node, nil
}

func (pkc *ProductKeluarCreate) createSpec() (*ProductKeluar, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductKeluar{config: pkc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productkeluar.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productkeluar.FieldID,
			},
		}
	)
	if value, ok := pkc.mutation.Qty(); ok {
		_spec.SetField(productkeluar.FieldQty, field.TypeString, value)
		_node.Qty = value
	}
	if value, ok := pkc.mutation.CreatedAt(); ok {
		_spec.SetField(productkeluar.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pkc.mutation.UpdatedAt(); ok {
		_spec.SetField(productkeluar.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pkc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productkeluar.ProductsTable,
			Columns: productkeluar.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pkc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productkeluar.CategoryTable,
			Columns: productkeluar.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductKeluarCreateBulk is the builder for creating many ProductKeluar entities in bulk.
type ProductKeluarCreateBulk struct {
	config
	builders []*ProductKeluarCreate
}

// Save creates the ProductKeluar entities in the database.
func (pkcb *ProductKeluarCreateBulk) Save(ctx context.Context) ([]*ProductKeluar, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pkcb.builders))
	nodes := make([]*ProductKeluar, len(pkcb.builders))
	mutators := make([]Mutator, len(pkcb.builders))
	for i := range pkcb.builders {
		func(i int, root context.Context) {
			builder := pkcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductKeluarMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pkcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pkcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pkcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pkcb *ProductKeluarCreateBulk) SaveX(ctx context.Context) []*ProductKeluar {
	v, err := pkcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pkcb *ProductKeluarCreateBulk) Exec(ctx context.Context) error {
	_, err := pkcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pkcb *ProductKeluarCreateBulk) ExecX(ctx context.Context) {
	if err := pkcb.Exec(ctx); err != nil {
		panic(err)
	}
}
