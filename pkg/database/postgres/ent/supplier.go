// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/supplier"
)

// Supplier is the model entity for the Supplier schema.
type Supplier struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Alamat holds the value of the "alamat" field.
	Alamat string `json:"alamat,omitempty"`
	// Telepon holds the value of the "telepon" field.
	Telepon string `json:"telepon,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SupplierQuery when eager-loading is set.
	Edges SupplierEdges `json:"edges"`
}

// SupplierEdges holds the relations/edges for other nodes in the graph.
type SupplierEdges struct {
	// Productmasuk holds the value of the productmasuk edge.
	Productmasuk []*ProductMasuk `json:"productmasuk,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductmasukOrErr returns the Productmasuk value or an error if the edge
// was not loaded in eager-loading.
func (e SupplierEdges) ProductmasukOrErr() ([]*ProductMasuk, error) {
	if e.loadedTypes[0] {
		return e.Productmasuk, nil
	}
	return nil, &NotLoadedError{edge: "productmasuk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Supplier) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case supplier.FieldID:
			values[i] = new(sql.NullInt64)
		case supplier.FieldName, supplier.FieldAlamat, supplier.FieldTelepon:
			values[i] = new(sql.NullString)
		case supplier.FieldCreatedAt, supplier.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Supplier", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Supplier fields.
func (s *Supplier) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case supplier.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case supplier.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case supplier.FieldAlamat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alamat", values[i])
			} else if value.Valid {
				s.Alamat = value.String
			}
		case supplier.FieldTelepon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field telepon", values[i])
			} else if value.Valid {
				s.Telepon = value.String
			}
		case supplier.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case supplier.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryProductmasuk queries the "productmasuk" edge of the Supplier entity.
func (s *Supplier) QueryProductmasuk() *ProductMasukQuery {
	return NewSupplierClient(s.config).QueryProductmasuk(s)
}

// Update returns a builder for updating this Supplier.
// Note that you need to call Supplier.Unwrap() before calling this method if this Supplier
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Supplier) Update() *SupplierUpdateOne {
	return NewSupplierClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Supplier entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Supplier) Unwrap() *Supplier {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Supplier is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Supplier) String() string {
	var builder strings.Builder
	builder.WriteString("Supplier(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("alamat=")
	builder.WriteString(s.Alamat)
	builder.WriteString(", ")
	builder.WriteString("telepon=")
	builder.WriteString(s.Telepon)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Suppliers is a parsable slice of Supplier.
type Suppliers []*Supplier

func (s Suppliers) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
