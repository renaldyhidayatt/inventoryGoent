// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/category"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/predicate"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/product"
	"github.com/renaldyhidayatt/inventorygoent/pkg/database/postgres/ent/productkeluar"
)

// ProductKeluarQuery is the builder for querying ProductKeluar entities.
type ProductKeluarQuery struct {
	config
	ctx          *QueryContext
	order        []OrderFunc
	inters       []Interceptor
	predicates   []predicate.ProductKeluar
	withProducts *ProductQuery
	withCategory *CategoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductKeluarQuery builder.
func (pkq *ProductKeluarQuery) Where(ps ...predicate.ProductKeluar) *ProductKeluarQuery {
	pkq.predicates = append(pkq.predicates, ps...)
	return pkq
}

// Limit the number of records to be returned by this query.
func (pkq *ProductKeluarQuery) Limit(limit int) *ProductKeluarQuery {
	pkq.ctx.Limit = &limit
	return pkq
}

// Offset to start from.
func (pkq *ProductKeluarQuery) Offset(offset int) *ProductKeluarQuery {
	pkq.ctx.Offset = &offset
	return pkq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pkq *ProductKeluarQuery) Unique(unique bool) *ProductKeluarQuery {
	pkq.ctx.Unique = &unique
	return pkq
}

// Order specifies how the records should be ordered.
func (pkq *ProductKeluarQuery) Order(o ...OrderFunc) *ProductKeluarQuery {
	pkq.order = append(pkq.order, o...)
	return pkq
}

// QueryProducts chains the current query on the "products" edge.
func (pkq *ProductKeluarQuery) QueryProducts() *ProductQuery {
	query := (&ProductClient{config: pkq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pkq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pkq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productkeluar.Table, productkeluar.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, productkeluar.ProductsTable, productkeluar.ProductsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pkq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCategory chains the current query on the "category" edge.
func (pkq *ProductKeluarQuery) QueryCategory() *CategoryQuery {
	query := (&CategoryClient{config: pkq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pkq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pkq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productkeluar.Table, productkeluar.FieldID, selector),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, productkeluar.CategoryTable, productkeluar.CategoryPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pkq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductKeluar entity from the query.
// Returns a *NotFoundError when no ProductKeluar was found.
func (pkq *ProductKeluarQuery) First(ctx context.Context) (*ProductKeluar, error) {
	nodes, err := pkq.Limit(1).All(setContextOp(ctx, pkq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productkeluar.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pkq *ProductKeluarQuery) FirstX(ctx context.Context) *ProductKeluar {
	node, err := pkq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductKeluar ID from the query.
// Returns a *NotFoundError when no ProductKeluar ID was found.
func (pkq *ProductKeluarQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pkq.Limit(1).IDs(setContextOp(ctx, pkq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productkeluar.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pkq *ProductKeluarQuery) FirstIDX(ctx context.Context) int {
	id, err := pkq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductKeluar entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProductKeluar entity is found.
// Returns a *NotFoundError when no ProductKeluar entities are found.
func (pkq *ProductKeluarQuery) Only(ctx context.Context) (*ProductKeluar, error) {
	nodes, err := pkq.Limit(2).All(setContextOp(ctx, pkq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productkeluar.Label}
	default:
		return nil, &NotSingularError{productkeluar.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pkq *ProductKeluarQuery) OnlyX(ctx context.Context) *ProductKeluar {
	node, err := pkq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductKeluar ID in the query.
// Returns a *NotSingularError when more than one ProductKeluar ID is found.
// Returns a *NotFoundError when no entities are found.
func (pkq *ProductKeluarQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pkq.Limit(2).IDs(setContextOp(ctx, pkq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productkeluar.Label}
	default:
		err = &NotSingularError{productkeluar.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pkq *ProductKeluarQuery) OnlyIDX(ctx context.Context) int {
	id, err := pkq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductKeluars.
func (pkq *ProductKeluarQuery) All(ctx context.Context) ([]*ProductKeluar, error) {
	ctx = setContextOp(ctx, pkq.ctx, "All")
	if err := pkq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProductKeluar, *ProductKeluarQuery]()
	return withInterceptors[[]*ProductKeluar](ctx, pkq, qr, pkq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pkq *ProductKeluarQuery) AllX(ctx context.Context) []*ProductKeluar {
	nodes, err := pkq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductKeluar IDs.
func (pkq *ProductKeluarQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = setContextOp(ctx, pkq.ctx, "IDs")
	if err := pkq.Select(productkeluar.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pkq *ProductKeluarQuery) IDsX(ctx context.Context) []int {
	ids, err := pkq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pkq *ProductKeluarQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pkq.ctx, "Count")
	if err := pkq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pkq, querierCount[*ProductKeluarQuery](), pkq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pkq *ProductKeluarQuery) CountX(ctx context.Context) int {
	count, err := pkq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pkq *ProductKeluarQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pkq.ctx, "Exist")
	switch _, err := pkq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pkq *ProductKeluarQuery) ExistX(ctx context.Context) bool {
	exist, err := pkq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductKeluarQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pkq *ProductKeluarQuery) Clone() *ProductKeluarQuery {
	if pkq == nil {
		return nil
	}
	return &ProductKeluarQuery{
		config:       pkq.config,
		ctx:          pkq.ctx.Clone(),
		order:        append([]OrderFunc{}, pkq.order...),
		inters:       append([]Interceptor{}, pkq.inters...),
		predicates:   append([]predicate.ProductKeluar{}, pkq.predicates...),
		withProducts: pkq.withProducts.Clone(),
		withCategory: pkq.withCategory.Clone(),
		// clone intermediate query.
		sql:  pkq.sql.Clone(),
		path: pkq.path,
	}
}

// WithProducts tells the query-builder to eager-load the nodes that are connected to
// the "products" edge. The optional arguments are used to configure the query builder of the edge.
func (pkq *ProductKeluarQuery) WithProducts(opts ...func(*ProductQuery)) *ProductKeluarQuery {
	query := (&ProductClient{config: pkq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pkq.withProducts = query
	return pkq
}

// WithCategory tells the query-builder to eager-load the nodes that are connected to
// the "category" edge. The optional arguments are used to configure the query builder of the edge.
func (pkq *ProductKeluarQuery) WithCategory(opts ...func(*CategoryQuery)) *ProductKeluarQuery {
	query := (&CategoryClient{config: pkq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pkq.withCategory = query
	return pkq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Qty string `json:"qty,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductKeluar.Query().
//		GroupBy(productkeluar.FieldQty).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pkq *ProductKeluarQuery) GroupBy(field string, fields ...string) *ProductKeluarGroupBy {
	pkq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProductKeluarGroupBy{build: pkq}
	grbuild.flds = &pkq.ctx.Fields
	grbuild.label = productkeluar.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Qty string `json:"qty,omitempty"`
//	}
//
//	client.ProductKeluar.Query().
//		Select(productkeluar.FieldQty).
//		Scan(ctx, &v)
func (pkq *ProductKeluarQuery) Select(fields ...string) *ProductKeluarSelect {
	pkq.ctx.Fields = append(pkq.ctx.Fields, fields...)
	sbuild := &ProductKeluarSelect{ProductKeluarQuery: pkq}
	sbuild.label = productkeluar.Label
	sbuild.flds, sbuild.scan = &pkq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProductKeluarSelect configured with the given aggregations.
func (pkq *ProductKeluarQuery) Aggregate(fns ...AggregateFunc) *ProductKeluarSelect {
	return pkq.Select().Aggregate(fns...)
}

func (pkq *ProductKeluarQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pkq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pkq); err != nil {
				return err
			}
		}
	}
	for _, f := range pkq.ctx.Fields {
		if !productkeluar.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pkq.path != nil {
		prev, err := pkq.path(ctx)
		if err != nil {
			return err
		}
		pkq.sql = prev
	}
	return nil
}

func (pkq *ProductKeluarQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProductKeluar, error) {
	var (
		nodes       = []*ProductKeluar{}
		_spec       = pkq.querySpec()
		loadedTypes = [2]bool{
			pkq.withProducts != nil,
			pkq.withCategory != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProductKeluar).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProductKeluar{config: pkq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pkq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pkq.withProducts; query != nil {
		if err := pkq.loadProducts(ctx, query, nodes,
			func(n *ProductKeluar) { n.Edges.Products = []*Product{} },
			func(n *ProductKeluar, e *Product) { n.Edges.Products = append(n.Edges.Products, e) }); err != nil {
			return nil, err
		}
	}
	if query := pkq.withCategory; query != nil {
		if err := pkq.loadCategory(ctx, query, nodes,
			func(n *ProductKeluar) { n.Edges.Category = []*Category{} },
			func(n *ProductKeluar, e *Category) { n.Edges.Category = append(n.Edges.Category, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pkq *ProductKeluarQuery) loadProducts(ctx context.Context, query *ProductQuery, nodes []*ProductKeluar, init func(*ProductKeluar), assign func(*ProductKeluar, *Product)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*ProductKeluar)
	nids := make(map[int]map[*ProductKeluar]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(productkeluar.ProductsTable)
		s.Join(joinT).On(s.C(product.FieldID), joinT.C(productkeluar.ProductsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(productkeluar.ProductsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(productkeluar.ProductsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*ProductKeluar]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Product](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "products" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pkq *ProductKeluarQuery) loadCategory(ctx context.Context, query *CategoryQuery, nodes []*ProductKeluar, init func(*ProductKeluar), assign func(*ProductKeluar, *Category)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*ProductKeluar)
	nids := make(map[int]map[*ProductKeluar]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(productkeluar.CategoryTable)
		s.Join(joinT).On(s.C(category.FieldID), joinT.C(productkeluar.CategoryPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(productkeluar.CategoryPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(productkeluar.CategoryPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*ProductKeluar]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Category](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "category" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (pkq *ProductKeluarQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pkq.querySpec()
	_spec.Node.Columns = pkq.ctx.Fields
	if len(pkq.ctx.Fields) > 0 {
		_spec.Unique = pkq.ctx.Unique != nil && *pkq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pkq.driver, _spec)
}

func (pkq *ProductKeluarQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productkeluar.Table,
			Columns: productkeluar.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: productkeluar.FieldID,
			},
		},
		From:   pkq.sql,
		Unique: true,
	}
	if unique := pkq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pkq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productkeluar.FieldID)
		for i := range fields {
			if fields[i] != productkeluar.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pkq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pkq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pkq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pkq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pkq *ProductKeluarQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pkq.driver.Dialect())
	t1 := builder.Table(productkeluar.Table)
	columns := pkq.ctx.Fields
	if len(columns) == 0 {
		columns = productkeluar.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pkq.sql != nil {
		selector = pkq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pkq.ctx.Unique != nil && *pkq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pkq.predicates {
		p(selector)
	}
	for _, p := range pkq.order {
		p(selector)
	}
	if offset := pkq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pkq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductKeluarGroupBy is the group-by builder for ProductKeluar entities.
type ProductKeluarGroupBy struct {
	selector
	build *ProductKeluarQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pkgb *ProductKeluarGroupBy) Aggregate(fns ...AggregateFunc) *ProductKeluarGroupBy {
	pkgb.fns = append(pkgb.fns, fns...)
	return pkgb
}

// Scan applies the selector query and scans the result into the given value.
func (pkgb *ProductKeluarGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pkgb.build.ctx, "GroupBy")
	if err := pkgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductKeluarQuery, *ProductKeluarGroupBy](ctx, pkgb.build, pkgb, pkgb.build.inters, v)
}

func (pkgb *ProductKeluarGroupBy) sqlScan(ctx context.Context, root *ProductKeluarQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pkgb.fns))
	for _, fn := range pkgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pkgb.flds)+len(pkgb.fns))
		for _, f := range *pkgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pkgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pkgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProductKeluarSelect is the builder for selecting fields of ProductKeluar entities.
type ProductKeluarSelect struct {
	*ProductKeluarQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pks *ProductKeluarSelect) Aggregate(fns ...AggregateFunc) *ProductKeluarSelect {
	pks.fns = append(pks.fns, fns...)
	return pks
}

// Scan applies the selector query and scans the result into the given value.
func (pks *ProductKeluarSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pks.ctx, "Select")
	if err := pks.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductKeluarQuery, *ProductKeluarSelect](ctx, pks.ProductKeluarQuery, pks, pks.inters, v)
}

func (pks *ProductKeluarSelect) sqlScan(ctx context.Context, root *ProductKeluarQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pks.fns))
	for _, fn := range pks.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pks.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pks.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
